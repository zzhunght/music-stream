// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: account_query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT email FROM accounts
WHERE email = $1 LIMIT 1
`

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRow(ctx, checkEmailExists, email)
	err := row.Scan(&email)
	return email, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    name, 
    email, 
    password, 
    secret_key
) VALUES (
    $1, 
    $2, 
    $3, 
    $4
) RETURNING id, name, email, created_at, updated_at
`

type CreateAccountParams struct {
	Name      string      `json:"name"`
	Email     string      `json:"email"`
	Password  string      `json:"password"`
	SecretKey pgtype.Text `json:"secret_key"`
}

type CreateAccountRow struct {
	ID        int32            `json:"id"`
	Name      string           `json:"name"`
	Email     string           `json:"email"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (CreateAccountRow, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.SecretKey,
	)
	var i CreateAccountRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, name, email, password, role_id, secret_key, created_at, updated_at FROM accounts WHERE email = $1
`

func (q *Queries) GetAccount(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.RoleID,
		&i.SecretKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSecretKey = `-- name: GetSecretKey :one
SELECT secret_key FROM accounts
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetSecretKey(ctx context.Context, email string) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getSecretKey, email)
	var secret_key pgtype.Text
	err := row.Scan(&secret_key)
	return secret_key, err
}
