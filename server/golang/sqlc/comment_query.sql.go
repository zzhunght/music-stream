// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: comment_query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comment (content, user_id, song_id)
VALUES ($1, $2, $3) RETURNING id, content, user_id, song_id, created_at
`

type CreateCommentParams struct {
	Content string `json:"content"`
	UserID  int32  `json:"user_id"`
	SongID  int32  `json:"song_id"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment, arg.Content, arg.UserID, arg.SongID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.SongID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comment WHERE id = $1::int
`

func (q *Queries) DeleteComment(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteComment, id)
	return err
}

const getCommentById = `-- name: GetCommentById :one
SELECT id, content, user_id, song_id, created_at FROM comment WHERE id = $1::int
`

func (q *Queries) GetCommentById(ctx context.Context, id int32) (Comment, error) {
	row := q.db.QueryRow(ctx, getCommentById, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.SongID,
		&i.CreatedAt,
	)
	return i, err
}

const getSongComment = `-- name: GetSongComment :many
SELECT c.id, c.content, u.name, c.created_at FROM comment c
INNER JOIN accounts u ON c.user_id = u.id
WHERE c.song_id = $1
`

type GetSongCommentRow struct {
	ID        pgtype.Int4      `json:"id"`
	Content   string           `json:"content"`
	Name      string           `json:"name"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) GetSongComment(ctx context.Context, songID int32) ([]GetSongCommentRow, error) {
	rows, err := q.db.Query(ctx, getSongComment, songID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSongCommentRow{}
	for rows.Next() {
		var i GetSongCommentRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
