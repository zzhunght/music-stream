// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: song_query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSong = `-- name: CreateSong :one
INSERT INTO songs (
    name,
    thumbnail,
    path,
    lyrics,
    duration,
    release_date
) VALUES (
    $1, 
    $2, 
    $3, 
    $4, 
    $5, 
    $6
) RETURNING id, name, thumbnail, path, lyrics, duration, release_date, created_at, updated_at
`

type CreateSongParams struct {
	Name        string      `json:"name"`
	Thumbnail   pgtype.Text `json:"thumbnail"`
	Path        pgtype.Text `json:"path"`
	Lyrics      pgtype.Text `json:"lyrics"`
	Duration    pgtype.Int4 `json:"duration"`
	ReleaseDate pgtype.Date `json:"release_date"`
}

func (q *Queries) CreateSong(ctx context.Context, arg CreateSongParams) (Song, error) {
	row := q.db.QueryRow(ctx, createSong,
		arg.Name,
		arg.Thumbnail,
		arg.Path,
		arg.Lyrics,
		arg.Duration,
		arg.ReleaseDate,
	)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Thumbnail,
		&i.Path,
		&i.Lyrics,
		&i.Duration,
		&i.ReleaseDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRandomSong = `-- name: GetRandomSong :many
SELECT id, name, thumbnail, path, lyrics, duration, release_date, created_at, updated_at FROM songs
Order by RAND()
limit 12
`

func (q *Queries) GetRandomSong(ctx context.Context) ([]Song, error) {
	rows, err := q.db.Query(ctx, getRandomSong)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Song{}
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Thumbnail,
			&i.Path,
			&i.Lyrics,
			&i.Duration,
			&i.ReleaseDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchSong = `-- name: SearchSong :many
SELECT id, name, thumbnail, path, lyrics, duration, release_date, created_at, updated_at FROM songs
where name ilike $1 || '%'
`

func (q *Queries) SearchSong(ctx context.Context, search pgtype.Text) ([]Song, error) {
	rows, err := q.db.Query(ctx, searchSong, search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Song{}
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Thumbnail,
			&i.Path,
			&i.Lyrics,
			&i.Duration,
			&i.ReleaseDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
