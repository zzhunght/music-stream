// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: song_query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const associateSongArtist = `-- name: AssociateSongArtist :exec
INSERT INTO songs_artist (song_id, artist_id, owner) VALUES ($1, $2, $3)
`

type AssociateSongArtistParams struct {
	SongID   int32 `json:"song_id"`
	ArtistID int32 `json:"artist_id"`
	Owner    bool  `json:"owner"`
}

func (q *Queries) AssociateSongArtist(ctx context.Context, arg AssociateSongArtistParams) error {
	_, err := q.db.Exec(ctx, associateSongArtist, arg.SongID, arg.ArtistID, arg.Owner)
	return err
}

const createSong = `-- name: CreateSong :one
INSERT INTO songs (
    name,
    thumbnail,
    path,
    lyrics,
    duration,
    release_date
) VALUES (
    $1, 
    $2, 
    $3, 
    $4, 
    $5, 
    $6
) RETURNING id, name, thumbnail, path, lyrics, duration, release_date, created_at, updated_at
`

type CreateSongParams struct {
	Name        string      `json:"name"`
	Thumbnail   pgtype.Text `json:"thumbnail"`
	Path        pgtype.Text `json:"path"`
	Lyrics      pgtype.Text `json:"lyrics"`
	Duration    pgtype.Int4 `json:"duration"`
	ReleaseDate pgtype.Date `json:"release_date"`
}

func (q *Queries) CreateSong(ctx context.Context, arg CreateSongParams) (Song, error) {
	row := q.db.QueryRow(ctx, createSong,
		arg.Name,
		arg.Thumbnail,
		arg.Path,
		arg.Lyrics,
		arg.Duration,
		arg.ReleaseDate,
	)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Thumbnail,
		&i.Path,
		&i.Lyrics,
		&i.Duration,
		&i.ReleaseDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRandomSong = `-- name: GetRandomSong :many
SELECT id, name, thumbnail, path, lyrics, duration, release_date, created_at, updated_at FROM songs
Order by RAND()
limit 12
`

func (q *Queries) GetRandomSong(ctx context.Context) ([]Song, error) {
	rows, err := q.db.Query(ctx, getRandomSong)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Song{}
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Thumbnail,
			&i.Path,
			&i.Lyrics,
			&i.Duration,
			&i.ReleaseDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSongBySongCategory = `-- name: GetSongBySongCategory :many
SELECT id, name, thumbnail, path, lyrics, duration, release_date, created_at, updated_at from  songs 
WHERE id in (
    SELECT song_id from song_categories WHERE category_id = $1
) LIMIT COALESCE($3::int, 50)
OFFSET COALESCE($2::int, 0)
`

type GetSongBySongCategoryParams struct {
	CategoryID int32 `json:"category_id"`
	Start      int32 `json:"start"`
	Size       int32 `json:"size"`
}

func (q *Queries) GetSongBySongCategory(ctx context.Context, arg GetSongBySongCategoryParams) ([]Song, error) {
	rows, err := q.db.Query(ctx, getSongBySongCategory, arg.CategoryID, arg.Start, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Song{}
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Thumbnail,
			&i.Path,
			&i.Lyrics,
			&i.Duration,
			&i.ReleaseDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSongs = `-- name: GetSongs :many

SELECT id, name, thumbnail, path, lyrics, duration, release_date, created_at, updated_at FROM songs
OFFSET COALESCE($1::int, 0)
LIMIT COALESCE($2::int, 20)
`

type GetSongsParams struct {
	Start int32 `json:"start"`
	Size  int32 `json:"size"`
}

func (q *Queries) GetSongs(ctx context.Context, arg GetSongsParams) ([]Song, error) {
	rows, err := q.db.Query(ctx, getSongs, arg.Start, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Song{}
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Thumbnail,
			&i.Path,
			&i.Lyrics,
			&i.Duration,
			&i.ReleaseDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAssociateSongArtist = `-- name: RemoveAssociateSongArtist :exec

DELETE FROM songs_artist  WHERE artist_id = $1 AND song_id = $2
`

type RemoveAssociateSongArtistParams struct {
	ArtistID int32 `json:"artist_id"`
	SongID   int32 `json:"song_id"`
}

func (q *Queries) RemoveAssociateSongArtist(ctx context.Context, arg RemoveAssociateSongArtistParams) error {
	_, err := q.db.Exec(ctx, removeAssociateSongArtist, arg.ArtistID, arg.SongID)
	return err
}

const searchSong = `-- name: SearchSong :many
SELECT id, name, thumbnail, path, lyrics, duration, release_date, created_at, updated_at FROM songs
where name ilike $1 || '%'
`

func (q *Queries) SearchSong(ctx context.Context, search pgtype.Text) ([]Song, error) {
	rows, err := q.db.Query(ctx, searchSong, search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Song{}
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Thumbnail,
			&i.Path,
			&i.Lyrics,
			&i.Duration,
			&i.ReleaseDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSong = `-- name: UpdateSong :one

UPDATE songs 
SET name = $1, thumbnail = $2, 
path = $3, lyrics = $4, duration = $5, release_date = $6
WHERE id = $7
RETURNING id, name, thumbnail, path, lyrics, duration, release_date, created_at, updated_at
`

type UpdateSongParams struct {
	Name        string      `json:"name"`
	Thumbnail   pgtype.Text `json:"thumbnail"`
	Path        pgtype.Text `json:"path"`
	Lyrics      pgtype.Text `json:"lyrics"`
	Duration    pgtype.Int4 `json:"duration"`
	ReleaseDate pgtype.Date `json:"release_date"`
	ID          int32       `json:"id"`
}

func (q *Queries) UpdateSong(ctx context.Context, arg UpdateSongParams) (Song, error) {
	row := q.db.QueryRow(ctx, updateSong,
		arg.Name,
		arg.Thumbnail,
		arg.Path,
		arg.Lyrics,
		arg.Duration,
		arg.ReleaseDate,
		arg.ID,
	)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Thumbnail,
		&i.Path,
		&i.Lyrics,
		&i.Duration,
		&i.ReleaseDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
